---
# ~ additional YAML options omitted for brevity ~
title: "Data Viz Homework 4"
author: "Olivia Holt"
data: 03-10-2024
format:
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
---

# Data

From Kaggle:

<https://www.kaggle.com/datasets/mikeshout/14erpeaks/data>

### **Context**

This tidy dataset lists mountain peaks rising to an elevation greater than 14,000 ft (4,267 meters) located in the state of Colorado, USA.

The term fourteener refers to mountain peaks with an elevation greater than 14,000 feet (4,267 meters) and a significant prominence. The prominence is generally agreed to be at least 300 feet higher than the saddle that connecting it to a neighboring peak.

In Colorado, and in this dataset, there are 58 peaks over 14,000 feet. Five of those peaks do not meet the prominence rule, so you can filter the list down to the commonly accepted list of 53 Colorado fourteeners.

**Parameters of interest:**

-   **Traffic High\*** – The high range of estimated visits in the year 2017

-   **Lat\*** -The latitudinal coordinate in decimal form

-   **Long\*** - The longitudinal coordinate in decimal form

-   **Mountain Peak** – The name of the peak

-   **Mountain Range** – the name of the primary mountain range the peak is a member of

-   **Elevation_ft** – The peak elevation in feet

-   **Distance_mi** – The distance of the standard route in miles

-   **Elevation Gain_ft** – The elevation gain of the standard route in feet

-   **Difficulty** – The Yosemite Decimal System difficulty rating, a value ranging from Class 1 (easiest) to Class 5 (most difficult)

-   **Prominence_ft** – How much higher the peak is in feet from the next highest point

-   **Isolation_mi** – the distance in miles from the nearest point of the same or higher elevation

```{r}
#| warning: false
#| error: false

#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "Alt text here"
knitr::include_graphics(here::here("Colorado14nerPopularity.png"))

```

# Load Libraries

```{r warning=FALSE}
#| warning: false
#| error: false

# load in libraries ----
library(tidyverse)
library(janitor)
library(dplyr)
library(ggplot2)
library(maps)
library(plotly)
library(kableExtra)
library(paletteer)
library(maps)
library(mapdata)
library(ggmap)
library(osmdata)
library(grid)
library(viridis)
library(ggtern)
```

# Load in Data

```{r warning=FALSE}
#| warning: false
#| error: false

data_wd <- "/Users/oliviaholt/Documents/eds240/Holt-eds240-HW4/data"
# import data ----
fourteener_data <- read_csv(file.path(data_wd, "14er.csv"), show_col_types = FALSE)
```

# Clean Data

```{r warning=FALSE}
#| warning: false
#| error: false

# clean data ----
fourteener_clean <- fourteener_data %>% 
  clean_names()

# I want the difficulty class to be a value from 1 to 6 which I will change here

fourteener_clean <- fourteener_clean %>%
  mutate(
    new_difficulty = case_when(
      difficulty == "Class 1" ~ 1,
      difficulty == "Class 2" ~ 2,
      difficulty == "Hard Class 2" ~ 3,
      difficulty == "Easy Class 3" ~ 4,
      difficulty == "Class 3" | difficulty == "Hard Class 3" ~ 5,
      difficulty == "Class 4" ~ 6,
      TRUE ~ 20
    )
  )

# I also want to arrange by descending order for taffic_high for viewing purposes
fourteener_clean <- fourteener_clean %>% arrange(traffic_high)

#grabbign the 20 most visited peaks into a subset
fourteener_20 <- fourteener_clean %>% 
  tail(20)
```

# Bar Plot

```{r warning=FALSE}
#| warning: false
#| error: false

#use subset of top 20 most visited peaks
col_plot <- fourteener_clean %>%
  tail(20) %>% 
  ggplot() +
  geom_col(aes(y = reorder(mountain_peak, traffic_high), #change into ascending order for mountain peak by traffic
               x = traffic_high, fill = difficulty))+
  xlab("Popularity by Traffic Estimate") +
  ylab("")+
  ggtitle(" ")+
  #get rid of grey background, fill with white
  theme(panel.background = element_rect(fill = "white"),
        #creating horizontal axis grid lines
        panel.grid.major.x = element_line(color = "#A8BAC4", size = 0.3),
        # Only left line of the vertical axis is painted in black
        axis.line.y.left = element_line(color = "black"),
        # increase font size for x and y-axis labels
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        axis.title.x = element_text(size = 14))+
  scale_fill_paletteer_d("nationalparkcolors::CraterLake")+
  labs(fill = "Difficulty Level")  # Change the legend title here

col_plot

#ggsave("col_plot.png", plot = col_plot, device = "png", width = 8, height = 6)
```

# Ternary Plot

```{r warning=FALSE}
#| warning: false
#| error: false


# Create a ternary plot with specified axis limits
ternary_plot <- ggtern(data = fourteener_clean, 
                       aes(x = traffic_high,
                           y = elevation_gain_ft,
                           z = prominence_ft,
                           fill = difficulty)) +
  
  # Add points to the plot with specified attributes
  geom_point(alpha = 0.5, shape = 21, color = "black", size = 4) +
  
  # Apply a theme to the plot
  theme_bvbw(base_size = 12) +
  
  # Adjust the legend position
  theme(legend.position = "bottom",axis.title = element_text(size = 9)) +
  
  # Label the axes
  ylab("Elevation Gain (ft)") +
  xlab("Traffic") +
  zlab("Prominence") +
  
  # Set the title of the plot
  labs(title = " ")+
  
   # Customize the legend title and appearance
   guides(fill = guide_legend(title = "Difficulty Level")) +
   theme(legend.key = element_rect(fill = "white", color = "white"),
         legend.title = element_text(size = 10))+  # customizing legend box color
   #Customize the legend title and appearance
  
  # Use scale_fill_manual to set custom colors for each difficulty level
  scale_fill_manual(values = c("Class 1" = "#7DCCD3FF", "Class 2" = "#4E7147FF", 
                               "Easy Class 3" = "#BE9C9DFF", "Class 3" = "#F7ECD8FF",
                               "Hard Class 3" = "#376597FF", "Class 4" = "#9888A5FF"))

# Print the ternary plot
ternary_plot


#ggsave("tern_plot.png", plot = ternary_plot2, device = "png", width = 8, height = 6)

```

```{r}
# Create a ternary plot with specified axis limits
tern_plot <- ggtern(data = fourteener_20, 
                       aes(x = traffic_high,
                           y = elevation_gain_ft,
                           z = prominence_ft,
                           fill = difficulty)) +
  
  # Add points to the plot with specified attributes
  geom_point(alpha = 0.8, shape = 21, color = "black", size = 4) +
  
  # Apply a theme to the plot
  theme_bvbw(base_size = 12) +
  
  # Adjust the legend position
  theme(legend.position = "bottom",axis.title = element_text(size = 9)) +
  
  # Label the axes
  ylab("Elevation Gain (ft)") +
  xlab("Traffic") +
  zlab("Prominence") +
  
  # Set the title of the plot
  labs(title = " ")+
  
   # Customize the legend title and appearance
   guides(fill = guide_legend(title = "Difficulty Level")) +
   theme(legend.key = element_rect(fill = "white", color = "white"),
         legend.title = element_text(size = 10))+  # customizing legend box color
   #Customize the legend title and appearance
  
  # Use scale_fill_manual to set custom colors for each difficulty level
  scale_fill_manual(values = c("Class 1" = "#7DCCD3FF", "Class 2" = "#4E7147FF", 
                               "Easy Class 3" = "#BE9C9DFF", "Class 3" = "#F7ECD8FF",
                               "Hard Class 3" = "#376597FF", "Class 4" = "#9888A5FF"))

# Print the ternary plot
tern_plot


#ggsave("tern_plot.png", plot = tern_plot, device = "png", width = 8, height = 6)
```

```{r}
#| warning: false
#| error: false

# Add points to show where the other 38 fourteeners are
tern_plot_2 <- tern_plot +
  geom_point(data = fourteener_clean, alpha = 0.5, shape = 1, color = "black", size = 4)

tern_plot_2

ggsave("tern_plot_2.png", plot = tern_plot_2, device = "png", width = 8, height = 6)
```

# **Map**

```{r warning=FALSE}
#| warning: false
#| error: false

# load United States state map data
MainStates <- map_data("state")
st_CO <- MainStates %>% 
  filter(region == "colorado")

#using the OSM package to view the main roads in colorado
big_streets <- getbb("Colorado United States")%>%
  opq()%>%
  add_osm_feature(key = "highway", 
                  value = c("motorway", "primary", "motorway_link", "primary_link")) %>%
  osmdata_sf()
```

```{r warning=FALSE}
#| warning: false
#| error: false

# Filter the last five points in the dataset
last_five <- tail(fourteener_20, 5)

map_plot<-ggplot() + 
  geom_polygon(data = st_CO, aes(x = long, y = lat, group = group),
               color = "black", fill = "white")+
  geom_point(data = fourteener_20,
             aes(x = long, y = lat, fill = difficulty),
             alpha = 0.5, shape = 24, color = "black", size = 5) +
  geom_text(data = fourteener_20,
            aes(x = long, y = lat, label = mountain_peak),
            vjust = 1.5, size = 3, color = "black") +  # Add labels
  scale_fill_viridis(discrete = TRUE, guide = "legend", option = "D") +
  theme() +
  ylab("Latitude") +
  xlab("Longitude") +
  ggtitle("Colorado")+
  geom_sf(data = big_streets$osm_lines, color = "black", alpha = 0.25) +
  theme_minimal()+
  labs()

map_plot

```

```{r}
#| warning: false
#| error: false


# Assuming your data frame is named 'fourteener_20'
# You can replace it with your actual data frame name

# Filter the last five points in the dataset
last_five <- tail(fourteener_20, 5)

map_plot <- ggplot() + 
  geom_polygon(data = st_CO, aes(x = long, y = lat, group = group),
               color = "black", fill = "white") +
  geom_point(data = fourteener_20,
             aes(x = long, y = lat, fill = difficulty),
             alpha = 0.5, shape = 24, color = "black", size = 5) +
  geom_label(data = last_five,
             aes(x = long, y = lat, label = mountain_peak),
             vjust = 1.5, size = 3, color = "black",
             label.padding = unit(0.15, "lines"),  # Adjust label padding
             label.r = unit(0.15, "lines"),         # Adjust label radius
             label.size = 0.25,
             nudge_x = 0.1,  # Nudge the labels to the right
             nudge_y = 0.1) +  # Nudge the labels upward
  geom_segment(data = last_five,
               aes(x = long, y = lat, xend = long, yend = lat, label = mountain_peak),
               color = "black", size = 0.5, alpha = 0.5, lineend = "round") +  # Add connecting lines
  scale_fill_viridis(discrete = TRUE, guide = "legend", option = "D") +
  theme() +
  ylab("Latitude") +
  xlab("Longitude") +
  ggtitle("Colorado") +
  geom_sf(data = big_streets$osm_lines, color = "black", alpha = 0.25) +
  theme_minimal() +
  labs()

map_plot
```

```{r}
#| warning: false
#| error: false

map_plot2 <- ggplot() + 
  geom_polygon(data = st_CO, aes(x = long, y = lat, group = group),
               color = "black", fill = "white") +
    geom_sf(data = big_streets$osm_lines, color = "black", alpha = 0.25) +
  geom_point(data = fourteener_20,
             aes(x = long, y = lat, fill = difficulty),
             alpha = 0.8, shape = 24, color = "black", size = 5) +
  geom_label(data = mt_bierstadt,
             aes(x = long + 0.1, y = lat + 0.1, label = mountain_peak),
             vjust = 1.5, size = 3, color = "black",
             label.padding = unit(0.15, "lines"),  # Adjust label padding
             label.r = unit(0.15, "lines"),         # Adjust label radius
             label.size = 0.25,
             nudge_x = 2.5,  # Nudge the labels to the right
             nudge_y = -1) +  # Nudge the labels upward)
  geom_segment(data = mt_bierstadt,
               aes(x = long, y = lat, xend = long + 2.5, yend = lat + -1),
               color = "black", size = 0.5, alpha = 1, lineend = "round") +  # Add connecting line to mt bierstadt
  scale_fill_paletteer_d("nationalparkcolors::CraterLake", name = "Difficulty Level") +
  labs(title = "") +  # Empty title
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        axis.text.x = element_blank(),   # Remove x-axis labels
        axis.text.y = element_blank(),   # Remove y-axis labels
        axis.ticks.x = element_blank(),   # Remove x-axis ticks
        axis.ticks.y = element_blank())+   # Remove y-axis ticks
  theme_void()

map_plot2

#ggsave("map_plot2.png", plot = map_plot2, device = "png", width = 8, height = 6)

```

```{r}
#| warning: false
#| error: false

# Coordinates for Denver
denver_lat <- 39.742043
denver_long <- -104.991531

# Add Denver point to the plot with a specific color
map_plot_den <- map_plot2 +
  geom_point(data = data.frame(lon = denver_long, lat = denver_lat), 
             aes(x = lon, y = lat, color = "Denver"), size = 2) +
  scale_color_manual(values = "red", name = "City")

# Print the plot
map_plot_den

#ggsave("map_plot_den.png", plot = map_plot_den, device = "png", width = 8, height = 6)

```

Write Up:

1.  clearly state your question(s):

    My question is 'What makes a 14ner popular? with this dataset in particular I am looking at elevation, traffic (high), difficulty, mountain range.

2.  describe your data (including your data source).

    This tidy dataset is from Kaggle and it lists mountain peaks rising to an elevation greater than 14,000 ft (otherwise known as a fourteener) located in Colorado. Other than being 14,000 ft tall to be a 14ner, the prominence of that peak has to be at least 300 feet higher than the saddle that is connecting it to a neighboring peak.

There are 58 peaks over 14,000 feet in Colorado and five of those peaks do not meet the prominence rule, but are in this dataset.

3.  address your approach and decisions for each of the ten design elements listed above (though you are welcome and encouraged to comment on any others that are not explicitly listed). If your visualizations do not include and / or consider a listed element(s), please comment on why (it’s possible that not all will be applicable to your visualizations, but be sure to say why that is the case).

Initially I anticipated that elevation/elevation gain, isolation, and difficulty would have the highest impact on traffic and therefore wanted to focus on those. In hindsight I wish I had found a data set that had the distances from each each to Denver as I think that would have a high impact on the popularity. From living in Colorado I remember Mt. Bierstadt being a popular peak because of its accessibility from Denver and it being the 'shortest' 14ner. This also made it the most accessible for people visiting from out of state as its closer to the airport in Denver and for people not use to the elevation. It also would have been interesting to look at trends for each season as not many people climb in the winter or fall.

**Which option do you plan to pursue:** Option 2

**Restate your question. Has this changed at all since HW #1:**

What makes a 14ner the most popular (measured as high traffic)?

**Explain which variables from your data set(s) you will use to answer your question(s):**

traffic (high), elevation gain, prominence, distance, latitude, longitude, mtn range, mtn peak.
